image:
  repository: statusim/nimbus-eth2
  tag: amd64-latest
  pullPolicy: IfNotPresent

replicas: 1

p2pNodePort:
  enabled: true

podManagementPolicy: Parallel

extraArgs:
  - --network=/data/testnet_spec/
  - --bootstrap-file=/data/testnet_spec/bootstrap_nodes.txt
  - --web3-url=http://dshackle.ethereum.svc.cluster.local:8545/eth
  - --max-peers=30
  - --validators-dir=/data/validator/keys/
  - --secrets-dir=/data/validator/secrets/
  - --graffiti=$(hostname | cut -c -32)
  - --doppelganger-detection=false
  - --log-level=TRACE;TRACE:discv5,libp2p;REQUIRED:none;DISABLED:none
initContainers:
# Important: Keep the init-keys container as the first element of the list
#            due to the usage of -set initContainers[0].env[0].value=...
- name: init-keys
  image: skylenet/ethereum-genesis-generator:latest@sha256:b9e330d38c4132d3ec460d85b9da429e5549b2260112ea95384cc91feb06d076
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - bash
    - -ace
    - >
      if [ -n "$(ls -A /data/validator/keys 2>/dev/null)" ];
      then
        echo "keys already exist. skipping...";
        exit 0;
      fi;
      S_MIN=$(echo ${NODE_KEY_RANGE} | cut -d ':' -f1 );
      S_MAX=$(echo ${NODE_KEY_RANGE} | cut -d ':' -f2 );
      mkdir -p /data/validator/keys /data/validator/secrets;
      echo "generating keys for node. range $S_MIN to $S_MAX";
      eth2-val-tools keystores --source-mnemonic="$MNEMONIC" --source-min=$S_MIN --source-max=$S_MAX --prysm-pass Pass123word --insecure --out-loc assigned_data;
      mv assigned_data/nimbus-keys/* /data/validator/keys/;
      mv assigned_data/secrets/* /data/validator/secrets/;
      chmod -R 0600 /data/validator/keys/*/keystore.json /data/validator/secrets/*;
      echo "finished generating and importing keys";
  volumeMounts:
    - name: storage
      mountPath: "/data"
  env:
    # Important: Keep "MNEMONIC" as the first env var.
    #            due to the usage of -set initContainers[0].env[0].value=...
    - name: MNEMONIC
      value: ""
    # Important: Keep "NODE_KEY_RANGE" as the second env var.
    #            due to the usage of -set initContainers[0].env[1].value=...
    - name: NODE_KEY_RANGE
      value: ""

- name: init-genesis
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      mkdir -p /data/testnet_spec;
      if ! [ -f /data/testnet_spec/genesis.ssz ];
      then
        echo "waiting for genesis provider";
        while ! wget -T 5 -c http://genesis-generator:8001/cl/; do sleep 10; done;
        wget -O /data/testnet_spec/deposit_contract.txt http://genesis-generator:8001/cl/deposit_contract.txt;
        wget -O /data/testnet_spec/deploy_block.txt http://genesis-generator:8001/cl/deploy_block.txt;
        wget -O /data/testnet_spec/config.yaml http://genesis-generator:8001/cl/config.yaml;
        wget -O /data/testnet_spec/genesis.ssz http://genesis-generator:8001/cl/genesis.ssz;
        echo "genesis init done";
      else
        echo "genesis exists. skipping...";
      fi;
      echo "waiting for bootnode to be available";
      while ! wget -O /data/testnet_spec/bootstrap_nodes.txt http://lighthouse-bootnode-0.lighthouse-bootnode-headless.ethereum.svc.cluster.local:8888/enr;
      do
        sleep 10;
      done;
      echo "bootnode init done: $(cat /data/testnet_spec/bootstrap_nodes.txt)";
  volumeMounts:
    - name: storage
      mountPath: "/data"

#persistence:
#  enabled: true
#  size: 2Gi

resources: {}

serviceMonitor:
  enabled: true
