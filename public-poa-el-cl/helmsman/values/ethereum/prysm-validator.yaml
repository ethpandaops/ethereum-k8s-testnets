image:
  repository: skylenet/prysm-beacon-debian
  tag: latest
  pullPolicy: IfNotPresent

replicas: 24

podManagementPolicy: Parallel

mode: validator

image:
  repository: skylenet/prysm-beacon-debian
  tag: latest@sha256:3d4331d1707a4603da9d1a721d800307226baef657589fe4a58c11c8e5f08675
  pullPolicy: IfNotPresent

extraArgs:
  - "--beacon-rpc-provider=\"\
    prysm-beacon-$(($(echo $(hostname)| rev | cut -d'-' -f 1 | rev)/4)).prysm-beacon-headless.ethereum.svc.cluster.local:4000\
    \""
  - --chain-config-file=/data/testnet_spec/config.yaml
  - --wallet-dir=/data/wallet
  - --wallet-password-file=/data/wallet_pass.txt
  - --graffiti=$(hostname | cut -c -32)
initContainers:
# Important: Keep the init-keys container as the first element of the list
#            due to the usage of -set initContainers[0].env[0].value=...
- name: init-keys
  image: skylenet/ethereum-genesis-generator:latest@sha256:b9e330d38c4132d3ec460d85b9da429e5549b2260112ea95384cc91feb06d076
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - bash
    - -ace
    - >
      if [ -n "$(ls -A /data/wallet 2>/dev/null)" ];
      then
        echo "a wallet already exist. skipping...";
        exit 0;
      fi;
      PRYSM_PASS="Pass123word";
      INDEX=$(echo $(hostname)| rev | cut -d'-' -f 1 | rev);
      RANGE="NODE_${INDEX}_KEY_RANGE";
      S_MIN=$(echo ${!RANGE} | cut -d ':' -f1 );
      S_MAX=$(echo ${!RANGE} | cut -d ':' -f2 );
      mkdir -p /data/wallet;
      echo "generating keys for node $INDEX. range $S_MIN to $S_MAX";
      eth2-val-tools keystores --source-mnemonic="$MNEMONIC" --source-min=$S_MIN --source-max=$S_MAX --prysm-pass=$PRYSM_PASS --insecure --out-loc assigned_data;
      mv assigned_data/prysm/* /data/wallet/;
      echo "$PRYSM_PASS" > /data/wallet_pass.txt;
      chmod 0600 /data/wallet_pass.txt;
      find /data/wallet -type d -exec chmod 0700 {} \;;
      find /data/wallet -type f -exec chmod 0600 {} \;;
      echo "finished generating and importing keys";
  volumeMounts:
    - name: storage
      mountPath: "/data"
  env:
    # Important: Keep "MNEMONIC" as the first env var.
    #            due to the usage of -set initContainers[0].env[0].value=...
    - name: MNEMONIC
      value: ""
    - name: NODE_0_KEY_RANGE
      value: "48000:49000"
    - name: NODE_1_KEY_RANGE
      value: "49000:50000"
    - name: NODE_2_KEY_RANGE
      value: "50000:51000"
    - name: NODE_3_KEY_RANGE
      value: "51000:52000"
    - name: NODE_4_KEY_RANGE
      value: "52000:53000"
    - name: NODE_5_KEY_RANGE
      value: "53000:54000"
    - name: NODE_6_KEY_RANGE
      value: "54000:55000"
    - name: NODE_7_KEY_RANGE
      value: "55000:56000"
    - name: NODE_8_KEY_RANGE
      value: "56000:57000"
    - name: NODE_9_KEY_RANGE
      value: "57000:58000"
    - name: NODE_10_KEY_RANGE
      value: "58000:59000"
    - name: NODE_11_KEY_RANGE
      value: "59000:60000"
    - name: NODE_12_KEY_RANGE
      value: "60000:61000"
    - name: NODE_13_KEY_RANGE
      value: "61000:62000"
    - name: NODE_14_KEY_RANGE
      value: "62000:63000"
    - name: NODE_15_KEY_RANGE
      value: "63000:64000"
    - name: NODE_16_KEY_RANGE
      value: "64000:65000"
    - name: NODE_17_KEY_RANGE
      value: "65000:66000"
    - name: NODE_18_KEY_RANGE
      value: "66000:67000"
    - name: NODE_19_KEY_RANGE
      value: "67000:68000"
    - name: NODE_20_KEY_RANGE
      value: "68000:69000"
    - name: NODE_21_KEY_RANGE
      value: "69000:70000"
    - name: NODE_22_KEY_RANGE
      value: "70000:71000"
    - name: NODE_23_KEY_RANGE
      value: "71000:72000"


- name: init-genesis
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      mkdir -p /data/testnet_spec;
      if ! [ -f /data/testnet_spec/genesis.ssz ];
      then
        echo "waiting for genesis provider";
        while ! wget -T 5 -c http://genesis-generator:8001/cl/; do sleep 10; done;
        wget -O /data/testnet_spec/deposit_contract.txt http://genesis-generator:8001/cl/deposit_contract.txt;
        wget -O /data/testnet_spec/deploy_block.txt http://genesis-generator:8001/cl/deploy_block.txt;
        wget -O /data/testnet_spec/config.yaml http://genesis-generator:8001/cl/config.yaml;
        wget -O /data/testnet_spec/genesis.ssz http://genesis-generator:8001/cl/genesis.ssz;
        echo "genesis init done";
      else
        echo "genesis exists. skipping...";
      fi;
      while ! wget -O /data/testnet_spec/bootstrap_nodes.txt http://lighthouse-bootnode-0.lighthouse-bootnode-headless.ethereum.svc.cluster.local:8888/enr;
      do
        sleep 10;
      done;
      echo "bootnode init done: $(cat /data/testnet_spec/bootstrap_nodes.txt)";
  volumeMounts:
    - name: storage
      mountPath: "/data"

- name: init-beacon-wait
  image: alpine:latest
  imagePullPolicy: IfNotPresent
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
  command:
    - sh
    - -ace
    - >
      HEALTH_API="http://prysm-beacon-$(($(echo $(hostname)| rev | cut -d'-' -f 1 | rev)/4)).prysm-beacon-headless.ethereum.svc.cluster.local:3500/eth/v1/node/health";
      echo "waiting for beacon node to be available on $HEALTH_API";
      while ! wget $HEALTH_API; do sleep 10; done;
      echo "beacon node is available"

#persistence:
#  enabled: true
#  size: 2Gi

livenessProbe: null
readinessProbe: null

resources: {}

serviceMonitor:
  enabled: true
